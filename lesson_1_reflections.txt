-How did viewing a diff between two versions of a file help you see the bug that was introduced?

It shows the differences between the two files.
Lines that were added are indicated by a +
Lines that are deleted are indicated by a -
But a changed line ends up being a + and a -
You have to do the character by character check

-How could having easy access to the entire history of a file make you a more efficient 
programmer in the long term?

You can look back at older versions to determine when a bug was introduced.

-What do you think are the pros and cons of manually choosing when to create a commit, 
like you do in Git, vs having versions automatically saved, like Google docs does?

The big pro of manual saves is that you can commit when you know that the content is meaningful.
The downside is that you have to remember to commit.

-Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Saving multiple files lets you commit all interrelated files at the same time.

-How can you use the commands git log and git diff to view the history of files?
Git log shows all the commit points
Use git diff with two commit points (older first) to see the differences between the files.


-How might using version control make you more confident to make changes that could break something?
You can try something out knowing that you have a working version committed in the repository.

-Now that you have your workspace set up, what do you want to try using Git for?
Daily source code?
