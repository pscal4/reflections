-What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository, it creates a .git directory.
You need to do it to create the repository.

-How is the staging area different from the working directory and the repository? 
What value do you think it offers?
The working directory is a single checkout of one version of the project. 
The staging area is a file, generally contained in your Git directory, that stores 
information about what will go into your next commit.  	
The basic Git workflow goes something like this:
1.  You modify files in your working directory.
2.  You stage the files, adding snapshots of them to your staging area.
3.  You do a commit, which takes the files as they are in the staging area 
and stores that snapshot permanently to your Git directory.
If a particular version of a file is in the Git directory, it’s considered committed. 
If it’s modified but has been added to the staging area, it is staged. 
And if it was changed since it was checked out but has not been staged, it is modified.

-How can you use the staging area to make sure you have one commit per logical change?
Using git diff --staged will show all the differences between the staging area 
and the current commit.

-What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?
You would use new branches when adding a new feature or adding features for a future release.
Branches help keep the master version in tact but allow changes in a future version.
Master branch should always be the production working version.  
Development branch can be the active version for developers.  
Experimental branch for trying out new things.

-How do the diagrams help you visualize the branch structure?
git log --graph --online branch_name1 branch_name2 is not working for me.
git log --graph --all shows the lines but 


-What is the result of merging two branches together? 
Why do we represent it in the diagram the way we do?
UGH... I messed up the merge.  May have to start all over!

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Pros:  Computerized
Cons:  Can get mixed up!